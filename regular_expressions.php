<?php
//Введение в регулярные выражения в PHP
//preg_replace(что менять, на что, 
//строка); 

echo preg_replace('#a#', '!', 'bab');//b!b
echo "\n";
echo preg_replace('#x.x#', '!', 'xax eee');//! eee точка обозначает в регулярном выражении любой символ
//Напишите регулярку, которая найдет строки 
//'ahb', 'acb', 'aeb' по шаблону: буква 'a', любой символ, буква 'b'.
echo "\n";
$str = 'ahb acb aeb aeeb adcb 
axeb'; 
echo preg_replace('#a.b#', '!',$str );//! ! ! aeeb, adcb, axeb
echo "\n";
//Напишите регулярку, которая найдет строки 'abba', 'adca', 'abea' 
//по шаблону: буква 'a', два любых символа, буква 'b'.
$str1 = 'ahb acb aeb aeeb adcb axeb';
		 
echo preg_replace('#a..b#', '!', $str1);//ahb, acb, aeb ! ! !
echo "\n";
//Операторы повторения символов в регулярках
//операторы (квантификаторы) повторения: плюс + (один и более раз),
// звездочка * (ноль или более раз) и 
//вопрос ? (ноль или один раз). Эти операторы действуют на тот символ, который стоит перед ними.
//Напишите регулярку, которая найдет строки по шаблону: 
//буква 'a', буква 'b' один или более раз, буква 'a'.
$str = 'aa aba abba abbba abca abea'; 

echo preg_replace('#ab+a#', '!', $str);//aa ! ! ! abca abea
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: 
//буква 'a', буква 'b' ноль или более раз, буква 'a'.
$str = 'aa aba abba abbba abca abea'; 
echo preg_replace('#ab*a#', '!',$str);//! ! ! ! abca abea
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: 
//буква 'a', буква 'b' один раз или ниодного, буква 'a'.
$str = 'aa aba abba abbba abca abea';
echo preg_replace('#ab?a#', '!',$str);//! ! abba abbba abca abea
echo "\n";
//Напишите регулярку, которая найдет строки 
//'aa', 'aba', 'abba', 'abbba', не захватив 'abca' и 'abea'.
$str = 'aa aba abba abbba abca abea'; 
echo preg_replace('#ab*a#', '!', $str);//! ! ! ! abca abea
echo "\n";
//Группирующие скобки в регулярках PHP
//Напишите регулярку, которая найдет строки по шаблону: 
//строка 'ab' повторяется 1 или более раз.
$str = 'ab abab abab abababab abea';
echo preg_replace('#(ab)+#', '!', $str);//! ! ! ! !ea
echo "\n";
//Список специальных символов в регулярках в PHP
//цифры, их нельзя экранировать
//Являются спецсимволами: $ ^ . * + ? \ / {} [] () |
//Не являются спецсимволами: @ : , ' " ; - _ = < > % # ~ ` & !
//Напишите регулярку, 
//которая найдет строку 'a.a', не захватив остальные.
$str = 'a.a aba aea';
echo preg_replace('#a\.a#', '!', $str);//! aba aea
echo "\n";
//Напишите регулярку,
// которая найдет строку '2+3', не захватив остальные.
$str = '2+3 223 2223';
echo preg_replace('#2\+3#', '!', $str);//! 223 2223
echo "\n";
//Напишите регулярку, которая найдет строки '2+3',
//'2++3', '2+++3', не захватив остальные (+ может быть любое количество).
$str = '23 2+3 2++3 2+++3 345 567';
echo preg_replace('#2\++3#', '!', $str);//23 ! ! ! 345 567
echo "\n";
//Напишите регулярку, которая найдет строки 
//'23', '2+3', '2++3', '2+++3', не захватив остальные.
$str = '23 2+3 2++3 2+++3 445 677';
echo preg_replace('#2\+*3#', '!', $str);//! ! ! ! 445 677
echo "\n";
//Напишите регулярку, которая найдет строки 
//'*q+', '*qq+', '*qqq+', не захватив остальные.
$str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
echo preg_replace('#\*q+\+#', '!', $str);//*+ ! ! ! *qqq qqq+
echo "\n";
//Напишите регулярку, которая найдет 
//строки в квадратных скобках и заменят их на '!'.

$str = '[abc] {abc} abc (abc) [abc]'; 
echo preg_replace('#\[abc]#', '!',$str);//! {abc} abc (abc) !
echo "\n";
//Фигурные скобки в регулярных выражения PHP
//=======================================//
//Операторы +, *, ? хороши, однако, с их помощью нельзя указать конкретное число повторений. В этом случае вам на помощь придет оператор {}.
// Работает он следующим образом: {5} - пять повторений,
//  {2,5} - повторяется от двух до пяти (оба включительно),
//   {2,} - повторяется два и более раз.

//Напишите регулярку, которая найдет строки 'abba', 'abbba', 'abbbba' и только их.
$str = 'aa aba abba abbba abbbba abbbbba';
echo preg_replace('#ab{2,4}a#', '!', $str);//aa aba ! ! ! abbbbba
echo "\n";
//Напишите регулярку, которая найдет строки вида 'aba', в которых 'b'
// встречается менее трех раз (включительно).
$str = 'aa aba abba abbba abbbba abbbbba';
echo preg_replace('#ab{1,3}a#', '!', $str);//aa ! ! ! abbbba abbbbba
echo "\n";
//Напишите регулярку, которая найдет строки вида 'aba', в которых
// 'b' встречается более четырех раз (включительно).
$str = 'aa aba abba abbba abbbba abbbbba'; 
echo preg_replace('#ab{4,}a#', '!', $str);//aa aba abba abbba ! !
echo "\n";
//Ограничение жадности в регулярках в PHP
//Жадность можно ограничивать всем 
//операторам повторения, вот так: *?, ?? и {}?.
//======================================//
// Напишите регулярку, которая найдет все строки по краям которых стоят
//  буквы 'a', и заменит каждую из них на '!'. 
//  Между буквами a может быть любой символ (кроме 'a').
$str = 'aba accca azzza wwwwa';
echo preg_replace('#a.+?a#', '!', $str);//! ! ! wwwwa
echo "\n";
//Группы символов в регулярных выражениях PHP
//================================//
// Команда \d означает цифру от 0 до 9. 
//Команда \w обозначает цифру,
// латинскую букву или знак подчеркивания.
// Команда \s обозначает пробел или пробельный символ: пробел, перевод строки, табуляцию. 
//Напишите регулярку, которая найдет строки, в которых 
//по краям стоят буквы 'a', а между ними одна цифра.
$str = 'a1a a2a a3a a4a a5a aba aca';
echo preg_replace('#a\da#', '!', $str);//! ! ! ! ! aba aca
echo "\n";
//Напишите регулярку, которая найдет строки,
//  в которых по краям стоят буквы 'a',
//   а между ними любое количество цифр.
$str = 'a1a a22a a333a a4444a a55555a aba aca';
echo preg_replace('#a\d+a#', '!', $str);//! ! ! ! ! aba aca
echo "\n";
//Напишите регулярку, которая найдет строки, 
// в которых по краям стоят буквы 'a', 
// а между ними любое количество цифр 
// (в том числе и ноль цифр, то есть строка 'aa').
$str = 'aa a1a a22a a333a a4444a a55555a aba aca'; 
echo preg_replace('#a\d*a#', '!', $str);//! ! ! ! ! ! aba aca
echo "\n";
//Напишите регулярку, которая найдет строки следующего вида:
// по краям стоят буквы 'a' и 'b', а между ними - не число.
$str = 'avb a1b a2b a3b a4b a5b abb acb'; 
echo preg_replace('#a\Db#', '!', $str);//! a1b a2b a3b a4b a5b ! !
echo "\n";
// Напишите регулярку, которая найдет строки следующего вида: 
// по краям стоят буквы 'a' и 'b', 
// а между ними - не буква и не цифра.
$str = 'ave a#b a2b a$b a4b a5b a-b acb'; 
echo preg_replace('#a\Wb#', '!', $str);//ave ! a2b ! a4b a5b ! acb
echo "\n";
//Напишите регулярку, которая заменит все пробелы на '!'.
$str = 'ave a#a a2a a$a a4a a5a a-a aca'; 
echo preg_replace('#\s#', '!', $str);
echo "\n";
//Наборы символов в регулярных выражениях PHP
//========================================//
//Напишите регулярку, которая найдет по следующему шаблону:
//по краям стоят буквы 'a', а между ними - буква 'b', 'e' или 'x'.
$str = 'aba aea aca aza axa';
echo preg_replace('#a[bex]a#', '!', $str);//! ! aca aza !
echo "\n";
//Напишите регулярку, которая найдет по следующему шаблону: 
//по краям стоят буквы 'a', а между ними - цифра от 3-х до 6-ти.
$str = 'a1a a3a a7a a9a aba';
echo preg_replace('#a[3-6]a#', '!', $str);//a1a ! a7a a9a aba
echo "\n";
//Напишите регулярку, которая найдет по следующему шаблону:
 //по краям стоят буквы 'a', а между ними - буква от a до g.
 $str1 = 'aba aea afa aha aga';
 echo preg_replace('#a[a-g]a#', '!', $str1);//! ! ! aha !
echo "\n";
//Напишите регулярку, которая найдет по следующему шаблону:
// по краям стоят буквы 'a', а между ними - буква от a до f и от j до z.
$str = 'aba aea afa aha aga';
echo preg_replace('#a[a-fj-z]a#', '!', $str);//! ! ! aha aga
echo "\n";
//Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', 
//а между ними - буква от a до f и от A до D.
$str = 'aAa aea aEa aJa a3a';
echo preg_replace('#a[a-fA-D]a#', '!', $str);//! ! aEa aJa a3a
echo "\n";
// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a',
//  а между ними - маленькие латинские буквы, не затронув остальных.
$str = 'aAXa aeffa aGha aza ax23a a3sSa'; 
echo preg_replace('#a[b-z]+a#', '!', $str);//aAXa ! aGha ! ax23a a3sSa
echo "\n";
//Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a',
// а между ними - маленькие и большие латинские буквы, не затронув остальных.
$str = 'aAXa aeffa aGha aza ax23a a3sSa';
echo preg_replace('#a[a-zA-Z]+a#', '!', $str);//! ! ! ! ax23a a3sSa
echo "\n";
//Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', 
//а между ними - маленькие латинские буквы и цифры, не затронув остальных.
$str = 'aAXa aeffa aGha aza ax23a a3sSa';
echo preg_replace('#a[a-z1-9]+a#', '!', $str);//aAXa ! aGha ! ! a3sSa
echo "\n";
//Инвертирование наборов символов в регулярках
//===================================//
//С помощью шляпки ^ в начале квадратных скобок можно инвертировать желаемое.
//  То есть, если, к примеру, команда [ab] ищет букву 'a' или 'b', 
//  то команда [^ab] будет искать все символы, кроме 'a' и 'b'.
//Напишите регулярку, которая найдет строки по шаблону: цифра '1',
// затем символ не 'e' и не 'x', цифра '2'.
$str2 = '1lx2 1xb1z2 1x1z2 xCz 1ex2';
echo preg_replace('#1[^ex]2#', '!', $str2);//1lx2 1xb! 1x! xCz 1ex2
echo "\n";
$str = 'xaz xbz x1z xCz';
	echo preg_replace('#x[^a-z]z#', '!', $str);//xaz xbz ! !
echo "\n";
// Напишите регулярку, которая найдет строки по шаблону: 
// буква 'x', затем НЕ цифра от 2 до 7, буква 'z'.
   
$str = 'xaz xbz x1z xCz'; 
 echo preg_replace('#x[^2-7]z#', '!', $str);//! ! ! !
echo "\n";
// Напишите регулярку, которая найдет строки по шаблону: 
// буква 'x', затем НЕ большая латинская буква от 1 и более раз, буква 'z'.
echo preg_replace('#x[^\W]+z#', '!', $str);//! ! ! !
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: буква 'x', 
// затем не большая и не маленькая латинская буква и 
// не цифра от 1 до 5 от 1 и более раз, буква 'z'.
$str = 'xaz xbz x1z xCz';
echo preg_replace('#x[^A-Za-z1-5]+z#', '!', $str);//xaz xbz x1z xCz
echo "\n========\n";
//Особенности кириллицы в регулярках PHP
//=======================================//
//для корректной работы кириллицы в регулярке необходимо поставить модификатор u
//Напишите регулярку, которая найдет строки по шаблону: по краям стоят буквы 'w', 
//а между ними - буква кириллицы.
$str = 'wйw wяw wёw wqw';
echo preg_replace('#w[а-яё]w#u', '!', $str);//! ! ! wqw
echo "\n";
//Напишите регулярку, которая найдет все слова по шаблону: 
//любая кириллическая буква любое количество раз.
$str = 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ';
echo preg_replace('#[а-яёА-ЯЁ]+#u', '!', $str); //! ! ! ! ! ! ! ! ! !
//Спецсимволы внутри квадратных скобок в PHP
//=======================================//
//Спецсимволы внутри [] становятся обычными символами. Это значит,
// что их не надо экранировать обратным слешем.
//Напишите регулярку, которая найдет строки 'a.a',
// 'a+a', 'a*a', не затронув остальных.
$str = 'aba aea aca aza axa a.a a+a a*a'; 
echo "\n";
echo preg_replace('#a[.+*]a#', '!', $str);//aba aea aca aza axa ! ! !
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: буква 'x', 
//затем НЕ точка, НЕ собака, и НЕ доллар, а потом буква 'z'.
$str = 'xaz x.z x3z x@z x$z xrz';
echo preg_replace('#x[^.@$]z#', '!', $str);//! x.z ! x@z x$z !
echo "\n";
//Группы символов внутри квадратных скобок PHP
//Группы символов \d, \D, \w, \W, \s, \S внутри [] 
//будут обозначать именно группы, то есть по-прежнему будут командами.
//Напишите регулярку, которая найдет строки по шаблону:
// цифра или точка от 1 и более раз.
$str = 'xaz x.z x3z x@z x$z xrz';
echo preg_replace('#x[\d.]+z#', '!', $str);//xaz ! ! x@z x$z xrz
echo "\n";
// Напишите регулярку, которая найдет строки по шаблону: 
// не цифра и не буква от 'a' до 'g' от 3 до 7 раз.
$str = 'xaz x.z x3z x@z x$z xrz';
echo preg_replace('#x[^a-g3-7]z#', '!', $str);
echo "\n";
//Исключения внутри наборов в регулярках в регулярках PHP
//==================================//
// если вам нужны квадратные скобки как символы, то их нужно экранировать обратным слешем.
//Напишите регулярку, которая найдет все слова по шаблону: буква 'x',
// затем любое количество любых скобок, затем буква 'z'.
$str = 'x[]z x{}z x.z x()z';
echo preg_replace('#x[\[\]\{\}\(\)]+z#', '!', $str);//! ! x.z !
echo "\n";
//Напишите регулярку, которая найдет строки в любых скобках и заменят их на '!'.
$str = '[abc] {abc} abc (abc) [abc]'; 
echo preg_replace('#[\w]#', '!', $str);////////////////////
echo "\n";
//Символ шляпки внутри наборов в регулярках PHP
//===============================//
//Напишите регулярку, которая найдет строки по шаблону:
// шляпка или собака, а затем две латинских буквы.
$str = '^xx axx ^zz bkk @ss';
echo preg_replace('#[@^xsz]#', '!', $str);///////////////
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: НЕ шляпка и не собака, а затем две латинских буквы.
$str = '^xx axx ^zz bkk @ss';

echo preg_replace('#[^\^@zs\s\^ax]#', '!', $str);///////////
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: НЕ шляпка, а затем две латинских буквы.
$str = '^xx axx ^zz bkk';

echo preg_replace('#[^\^x*z\s]#', '!', $str);////////////////////
echo "\n";
//Дефис внутри наборов в регулярках PHP
//===============================//
//Найдите все строки по следующему шаблону: буква 'x', 
//большая или маленькая буква или дефис, буква 'z'.
$str = 'xaz xBz xcz x-z x@z';
echo preg_replace('#x[A-Za-z-]z#', '!', $str);//! ! ! ! x@z
echo "\n";
//Найдите все строки по следующему шаблону: буква 'x', 
//затем или доллар, или дефис или плюс, потом буква 'z'.
$str = 'xaz x$z x-z xcz x+z x%z x*z'; 
echo preg_replace('#x[\$\-\+]z#', '!', $str);//xaz ! ! xcz ! x%z x*z
echo "\n";
//Начало и конец строки в регулярках PHP
//====================================//
//Существуют специальные символы, которые обозначают начало ^ или конец строки $.
//Напишите регулярку, которая найдет первую подстроку из букв.
$str = 'abc def xyz';
echo preg_replace('#^abc#', '!', $str);//! def xyz
echo "\n";
//Напишите регулярку, которая найдет последнюю подстроку из букв.
$str = 'abc def xyz';
echo preg_replace('#xyz$#', '!', $str);//abc def !
echo "\n";
//Конец или начало слова в регулярках PHP
//==============================//
//Команда \b обозначает начало или конец слова, 
//а \B, соответственно, - не начало и не конец слова.
//Напишите регулярку, которая найдет строки по шаблону: буква 'x' в начале слова.
$str = 'aaa xaa aaa xbb aaa';
echo preg_replace('#\b[x]#', '!', $str);//aaa !aa aaa !bb aaa
echo "\n";
//Команда 'или' в регулярных выражениях PHP
//===================================//
// Данная команда позволяет разделить регулярку на несколько частей.
//Напишите регулярку, которая найдет строки по шаблону: 
//по краям стоят буквы 'a', а между ними - или буква
// 'e' любое количество раз или буква 'x' любое количество раз.
$str = 'aeeea aeea aea axa axxa axxxa'; 
echo preg_replace('#a(e+|x+)a#', '!', $str);//! ! ! ! ! !
echo "\n";
//Напишите регулярку, которая найдет строки по шаблону: 
//по краям стоят буквы 'a', а между ними - или буква 'e' два раза 
//или буква 'x' любое количество раз.
$str = 'aeeea aeea aea axa axxa axxxa'; 
echo preg_replace('#a(e{2}|x+)a#', '!', $str);//aeeea ! aea ! ! !
echo "\n";
//Ограничители регулярок в PHP
//===========================//
//В качестве ограничителей могут выступать не только #, но 
//и любые другие символы (только не буквы и не цифры).
//Используйте в качестве ограничителей символ тильды ~.
echo preg_replace('~a(e{2}|x+)a~', '!', $str);//aeeea ! aea ! ! !
echo "\n";
//Экранировка ограничителей в PHP
//==========================//
//Если символ не является специальным, то, когда вы используете 
//его в качестве ограничителя, его нужно будет экранировать в самой регулярке. 
//Исправьте ошибку, допущенную в следующем коде:
echo preg_replace('#a\#b#', '!', 'a#b');//! ен верно: echo preg_replace('#a#b#', '!', 'a#b');
echo "\n";
//Проблема обратного слеша в PHP
//==========================//
//Обратный слеш является спецсимволом PHP.
//Найдите в этой строке все подстроки по шаблону буква, обратный слеш, буква.
$str = 'a\\b c\\d e\\f';
echo preg_replace('#[a-z\\\\a-z]#', '!', $str);//!!! !!! !!!
echo "\n";
//Найдите в этой строке все подстроки по шаблону буква, обратный слеш любое количество раз, буква.
$str = 'a\\b c\\\\d e\\\\\\f';
echo preg_replace('#[a-z\\\\+a-z]#', '!', $str);//!!! !!!! !!!!!
echo "\n";
//Проверка строки с помощью регулярки на PHP
//=============================//
//функция preg_match, которая проверяет, есть ли в строке совпадение с регуляркой.
// функция выводит либо 1, либо 0 и используется для ответа на вопрос 'есть искомое 
//в строке или нет'. Вернет один - значит есть (а сколько раз - неясно), вернет ноль - значит нет.
//Определите, есть ли в строке 3 цифры подряд.
echo preg_match('#3+#', '222 3333 4444');//1
echo "\n";
//Определите, начинается ли переданная строка с http.
echo preg_match('#http#', 'htts www');//0
echo "\n===\n";
//Определите, начинается ли переданная строка с http или с https.
echo preg_match('#https|http#', 'httz https htt');//1
echo "\n";
//Определите, заканчивается ли переданная строка расширением txt, html или php.
echo preg_match('#\.(txt|html?|php)$#u', 'index.html');//1 слеш экранируем точку далее пишем условие в скобках, знак-$ означает конец строки, после символ u- юникод 
echo "\n";
//Определите, заканчивается ли переданная строка расширением jpg или jpeg.
echo preg_match('#\.(jpg|jpeg)$#', 'virtul.jpg');//1
echo "\n";
//Автоматическое тестирование регулярок в PHP
$reg = '#\d{3,}#';
$arr[] = 'aaa 123 bbb';
$arr[] = 'aaa 12345 bbb';
$arr[] = 'aaa 12x bbb';
$arr[] = 'aaa 12 bbb';		
	
foreach ($arr as $str) {
    echo $str . ' = ' . preg_match($reg, 
        $str) . "\n"; 
}
//aaa 123 bbb = 1
//aaa 12345 bbb = 1
//aaa 12x bbb = 0
//aaa 12 bbb = 0
//Пусть вам нужно проверить, что в строке есть дробное число. 
//Используя предложенный скрипт, проверьте вашу регулярку на различных строках.
$str = '121 3.5 66';
echo preg_match('#\d{1,}\.\d{1,}#', $str);//1
echo "\n===========\n";
//Проверка всей строки через регулярки в PHP
//=====================================//
// в начале регулярки следует поставить шляпку ^, а в конце - доллар $. Этим мы говорим, 
//что под шаблон должна попасть вся строка.
//Определите, является ли переданная строка является доменом. 
//Используйте для тестов следующие строки:
$reg = '#[\w-]+\.[com|ru|travel]#u';
    $arr[] = 'site.ru';          // +
	$arr[] = 'site.com';         // +
	$arr[] = 'my-site.com';      // +
	$arr[] = 'my-cool-site.com'; // +
	$arr[] = 'my_site.com';      // +
	$arr[] = 'site123.com';      // +
	$arr[] = 'site.travel';      // +
	$arr[] = 'si$te.com';        // -
	$arr[] = 'site.r';           // -

foreach($arr as $d) {
    echo $d . ' ' . preg_match($reg, $d). "\n";///////////////
}
echo "\n";
//Определите, является ли переданная строка является емейлом.
// Используйте для тестов следующие строки:
$arr1[] = 'addr@mail.ru';    // +
	$arr1[] = 'addr123@mail.ru'; // +
	$arr1[] = 'my-addr@mail.ru'; // +
	$arr1[] = 'my_addr@mail.ru'; // +
	$arr1[] = 'addr@site.ru';    // +
	$arr1[] = 'addr.ru';         // -
	$arr1[] = 'addr@.ru';        // -
	$arr1[] = 'my@addr@mail.ru'; // -
foreach($arr1 as $r){
    echo $r . ' = ' . preg_match('#([a-z])[mail|site]\.[ru]#', $r)."\n";/////////////////////////
}
echo "\n";
//Карманы при поиске через регулярки на PHP
//=======================================//
//Карманы представляют собой элементы массива,
//в которые можно положить части найденного регуляркой.
// В нашем случае в первый карман мы можем положить имя домена, а во второй - его зону.
$str = 'eee site.ru bbb';
$reg = '#([a-z0-9]+)\.([a-z]{2,})#';
preg_match($reg, $str, $res);
var_dump($res);
echo "\n==============\n";
//Положите год, месяц и день в отдельные карманы.
$str1 = '2025-12-31';
$reg1 = '#([\d]+)\-([\d]+)\-([\d]+)#';
preg_match($reg1, $str1, $res1);
var_dump($res1);
//Положите имя файла и его расширение в отдельные карманы.
$str = 'index.html';
$reg = '#([a-z]+)\.([a-z]+)#';
preg_match($reg, $str, $d);
var_dump($d);
//Поиск всех совпадений через регулярки на PHP
//======================================//
//С помощью функции preg_match_all 
//можно узнать количество всех совпадений с регулярным выражением
//Дана строка. Узнайте, сколько чисел в этой строке.
$str1 = '2025-12-31';
echo preg_match_all('#[2+|1+]#',$str1);//5
echo "\n";
//Все совпадения на карманы через регулярки в PHP
//====================================//
//С помощью функции preg_match_all можно разделить все найденные совпадения на карманы
//Найдите все даты, отделив год, месяц и день в отдельные карманы.
$str = '2023-10-29 2024-11-30 2025-12-31';
$reg = '#([\d]+)\-([\d]+)\-([\d]+)#';
preg_match_all($reg, $str, $res);
var_dump($res);
//Изменение поведения preg_match_all в PHP
//Модифицируйте предыдущую задачу так, чтобы 
//в первый подмассив попала первая дата с ее карманами,
// во второй подмассив - вторая с ее карманами и так далее.
///////////////////////////////////////////////////////////
//Несохраняющие скобки в регулярках PHP
//================================//
//специальные несохраняющие скобки (?: ) 
//они группируют, но не кладут в карман

//Даны подстроки, разделенные на две части произвольным количеством пар $@:
//Найдите каждую из таких подстрок и для каждой найденной подстроки 
//положите в первый карман то, что стоит до разделителя,
// а во второй карман - то, что стоит после разделителя.
$str = 'aaa$@bbb aaa$@$@bbb aaa$@$@$@bbb';
$reg = '#(?:a+\$)+(@b+)#';

preg_match_all($reg, $str, $res );
var_dump($res);
//Карманы при замене через регулярки на PHP
//====================================//
//$0 - нулевой карман, $1 - первый карман, $2 - второй карман
$str = '1 23 456 xax';
echo preg_replace('#(\d+)#', '{$1}', $str);
echo "\n";
//Поменяйте местами цифры во всех двухзначных числах.
$str = '12 34 56 78';
echo preg_replace('#([\d]+)([\d]+)#', '$2$1', $str);//21 43 65 87
echo "\n";
//Преобразуйте эту дату в '2025.12.31'.
$str = '31.12.2025';
echo preg_replace('#([\d]+)\.([\d]+)\.([\d]+)#', '$3.$2.$1', $str);//2025.12.31
echo "\n";
//Карманы в регулярном выражении в PHP
//================================//
//Найдите все подстроки, в которых есть три одинаковые буквы подряд.
$str = 'aaa bbb ccc xyz';
echo preg_replace('#([a-z])[a-z]+\1#', '!', $str);//! ! ! xyz
echo "\n";
//Найдите все подстроки, в которых есть две и более одинаковые буквы подряд.
$str = 'a aa aaa abab bbbb';
echo preg_replace('#([a-z])([a-z])+\g{1}#', '!', $str);///////////////////////////////
echo "\n";
$str = 'aaa aaa bbb bbb ccc ddd';
echo preg_replace('#([a-z])([a-z{3}])\1#', '!', $str);////////////////
echo "\n";
//Именованные карманы в регулярках PHP
//(?<name>pattern), где pattern - это регулярка, а name - это имя кармана.
//Положите часы, минуты и секунды в отдельные именованные карманы.
$str = '12:59:59';
$reg = '#(?<час>\d{2})\:(?<минута>\d{2})\:(?<секунда>\d{2})#u';
preg_match($reg, $str, $f);
var_dump($f);
echo "\n";
$str = '2025-10-29';
	$reg = '#(?<year>\d{4})-(?<month>\d{2})-(\d{2})#';
	
	preg_match($reg, $str, $match);
	var_dump($match);
////////////////////////////////////////////////////////
//Именованные карманы внутри регулярки PHP
//=============================//
//Найдите все подстроки со временем, в которых час совпадает с секундами.
$str = '12:59:59 12:59:12 09:45:09';
echo preg_replace('#(?<tame>\d{2}):(\d{2}):\g{tame}#', '!', $str);//12:59:59 ! !
echo "\n==================\n";
//Найдите все подстроки, в которых есть две и более одинаковые буквы подряд.
$str = 'a aa aaa abab bbbb';
echo preg_replace('#([a-z])+\1#', '!', $str);//a ! ! abab !
echo "\n";
$str = 'aaa aaa bbb bbb ccc ddd';
echo preg_replace('#([a-z])+([a-z])+([a-z])+\1#', '!', $str);//
echo "\n";
$str = '120:599:599 120:599:120 099:455:099';
echo preg_replace('#(?<tame>\d{3}):(\d{3}):\k{tame}#', '!', $str);
echo "\n";
$str = '120:599:599 12:59:12 099:455:099';
echo preg_replace('#(?<tame>\d{3}):(\d{3}):\g{tame}#', '!', $str);///////////////////
echo "\n";
//Общий номер карманов в регулярках PHP
////////////////////////////////////////
//Можно использовать специальную команду (?| ). Все карманы, 
//которые находятся внутри нее будут иметь один номер.
$str = '1991 2099';
$reg= '#(?|19(9\d)|20(\d\d))#';
preg_match($reg, $str, $res);
var_dump($res);
$reg = '#19(9\d)|20(\d\d)#';
$str = '1991';
	preg_match($reg, $str, $res);
	var_dump($res);
	$str = '2021';
	preg_match($reg, $str, $res);
	// if (!empty($res[1])){
	// 	$year = $res[1];
	// } else{
	// 	$year = $res[2];
	// }
	var_dump($res);
	$str = '2099';
	$reg= '#(?|19(9\d)|20(\d\d))#';
	preg_match($reg, $str, $res);
	var_dump($res);
	echo "\n==============\n";
	$arr = [
		'31-12-2025',
		'30-11-1995',
		'29-10-1990',
	];
	$str=null;
	foreach($arr as $elem => $key){
		$str .=$key;
	}
$reg = '#(\d\d)-(\d\d)-(?|19(9\d)|20(\d\d))#';
preg_match_all($reg, $str, $res);
	echo var_dump($res);
//print_r($res[1]);
echo "\n==================\n"; 
//Позитивный и негативный просмотр в PHP
//////////////////////////////////////
$str = 'aaax';
echo preg_replace('#aaa(?=x)#', '!', 'aaax'); // !x, (?=x)- позитивный просмотр вперед
echo "\n";
echo preg_replace('#aaa(?!x)#', '!', 'aaab'); // вернет '!b', (?!x)-негативный просмотр вперед 
echo "\n";
echo preg_replace('#(?<=x)aaa#', '!', 'xaaa'); // вернет 'x!', (?<=x)- позитивный просмотр назад 
echo "\n";
echo preg_replace('#(?<!x)aaa#', '!', 'baaa'); // вернет 'b!' , (?<!x)- негативный просмотр назад
echo "\n";
//Дана строка, содержащая имена функций:
$str = 'func1() func2() func3()';

//Получите массив имен функций из строки.
echo preg_replace('#func(?=[1-3])#', '!', $str);//////////////
echo "\n";
//Дана строка с тегом:
$str = '<a href="" class="eee" id="zzz">';
//Получите массив имен атрибутов этого тега.
echo preg_replace('##', '!', $str);////////////////////////////
echo "\n";
//Дана строка с переменными:
$str = '$aaa $bbb $ccc';
//Получите массив имен переменных из этой строки (без доллара).
echo preg_replace('#(?<!x)[abc]#', '!', $str);////////////////
echo "\n";
//Замена с коллбэком через регулярки в PHP
$str = '2+3= 3+5= 7+8=';
	
$res = preg_replace_callback('#(\d+)\+(\d+)=#', function($match) {
		return $match[0].$match[1]+$match[2]."\n";
	}, $str);
echo $res;
echo "\n";
//Дана строка с целыми числами. С помощью регулярки преобразуйте строку так,
// чтобы вместо этих чисел стояли их квадраты.
$str = '34 51 21';
$res1 = preg_replace_callback('#(\d\d)#', function($f){
	return $f[0].'='.$f[1]*$f[1];
}, $str);
echo $res1;//34=1156 51=2601 21=441
echo "\n";
//Игнорирование регистра регулярок в PHP
//Упростите следующий код, использовав соответствующий модификатор:
echo preg_replace('#[a-z]+#i', '!', 'aaa BBB');//!! i-преобразует символы в нижний регистр
echo "\n";
//Комментарии в регулярке в PHP
//Модификатор x разрешает расставлять в регулярке произвольные пробелы и переводы строк. 
//Кроме того, символ решетки становится символом однострочного комментария
echo preg_replace('#[a-z]+@[0-9]+#', '!', 'aaa@333');//!
echo "\n";
echo preg_replace('~
		[a-z]+ # буквы 
		@      # символ собаки
		[0-9]+ # цифры
	~x', '!', 'aaa@333');//!
//Работа с юникодом в регулярках в PHP
//u-корректно обрабатывать кириллические строки:
echo "\n";
echo preg_replace('#[а-яё]#u', '!', 'яяя ййй ёёё');//!!! !!! !!! 
echo "\n";
//Изменение жадности регулярок в PHP
//Модификатор U делает так, что все операторы повторений станут по умолчанию нежадными,
// а добавление ?, наоборот, будет добавлять им жадности:
echo preg_replace('#x.+x#U', '!', 'xax xaax xaaax');//!!!
echo "\n";
//Экранировка обычных символов в регулярках в PHP
//Модификатор X делает так, что экранировка обычного символа приведет к ошибке. 
echo preg_replace('#x\@x#X', '!', 'x@x');//! 
echo "\n";
//Несколько модификаторов регулярок в PHP
echo preg_replace('#[a-z]+#iU', '!', 'aaa bbb'); 
echo "\n";
//Расскажите, как меняют поведение регулярки модификаторы в следующем коде:
// echo preg_replace('
// ~[a-z]+#Uu'#
//  '!' # 
// 'aaa bbb~x');

echo preg_replace('#[a-z]+#Uu', '!', 'aaa bbb');//u-корректно обрабатывать кириллические строки , U- все операторы повторений станут по умолчанию нежадными
echo "\n";
preg_replace('#[a-z]+#Xx', '!', 'aaa bbb'); //Модификатор X делает так, что экранировка обычного символа приведет к ошибке. 
//Модификатор x разрешает расставлять в регулярке произвольные пробелы и переводы строк
echo "\n";
preg_replace('#[а-яё]+#ui', '!', 'яяя ЙЙЙ ёёё'); //u-корректно обрабатывать кириллические строки 
//i-преобразует символы в нижний регистр




